{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_LOADING, AUTH_LOADED, AUTH_ERROR, AUTH_LOGIN_SUCCESS, AUTH_LOGIN_FAIL, AUTH_LOGOUT_SUCCESS, AUTH_REGISTER_SUCCESS, AUTH_REGISTER_FAIL } from \"./types\"; // CHECK TOKEN AND LOAD AUTH STATE\n\nexport const authLoad = () => (dispatch, getState) => {\n  dispatch({\n    type: AUTH_LOADING\n  }); // test\n\n  if (getState().authReducer.token) {\n    dispatch({\n      type: AUTH_LOADED\n    });\n  } else {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  } // axios.post('check', null, tokenConfig(getState))\n  //     .then(res => {\n  //         dispatch({\n  //             type: AUTH_LOADED,\n  //             type: AUTH_ERROR,\n  //             payload: res.data,\n  //         });\n  //     }).catch(err => {\n  //         dispatch({type: AUTH_ERROR});\n  //         console.log(err)\n  //     })\n\n}; // LOGIN\n\nexport const authLogin = (email, password) => dispatch => {\n  dispatch({\n    type: AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('https://alfinder.com/alfinder/public/api/auth/login', body, config).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: res.data.data.code === 7 ? AUTH_LOGIN_SUCCESS : AUTH_LOGIN_FAIL,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: AUTH_LOGIN_FAIL,\n      payload: err\n    });\n    console.log(err);\n  });\n}; // REGISTER\n\nexport const authRegister = ({\n  fname,\n  lname,\n  email,\n  phone,\n  password,\n  password_confirmation\n}) => dispatch => {\n  if (password !== password_confirmation) {\n    dispatch({\n      type: AUTH_REGISTER_FAIL,\n      payload: {\n        message: 'passwords much match.'\n      }\n    });\n  }\n\n  axios.post('https://alfinder.com/alfinder/public/api/user/register', {\n    first_name: fname,\n    last_name: lname,\n    email: email,\n    phone_number: phone,\n    password: password\n  }).then(res => {\n    console.log(res);\n    dispatch({\n      type: AUTH_REGISTER_SUCCESS\n    });\n    dispatch(authLogin(email, password));\n  }).catch(err => {\n    dispatch({\n      type: AUTH_REGISTER_FAIL,\n      payload: err\n    });\n    console.log(err);\n  });\n}; // LOGOUT\n\nexport const authLogout = () => (dispatch, getState) => {\n  const token = getState().authReducer.token;\n  const config = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['Authentication'] = `Token ${token}`;\n  } // axios.post('logout', null, tokenConfig(getState))\n  //     .then(res => {\n\n\n  dispatch({\n    type: AUTH_LOGOUT_SUCCESS\n  }); // }).catch(err => {\n  //     dispatch({type: AUTH_ERROR, payload: err});\n  //     console.log(err)\n  // })\n}; // RESET PASSWORD\n\nexport const resetPassword = () => (dispatch, getState) => {}; // HELPER\n\nexport const tokenConfig = getState => {\n  const token = getState().authReducer.token;\n  const config = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/ramtinmir/Alfinder Inc./Tech/Alfinder Inc./Alfinder Store (discountinued)/src/app/core/actions/auth.js"],"names":["axios","AUTH_LOADING","AUTH_LOADED","AUTH_ERROR","AUTH_LOGIN_SUCCESS","AUTH_LOGIN_FAIL","AUTH_LOGOUT_SUCCESS","AUTH_REGISTER_SUCCESS","AUTH_REGISTER_FAIL","authLoad","dispatch","getState","type","authReducer","token","authLogin","email","password","config","headers","Accept","body","JSON","stringify","post","then","res","console","log","data","code","payload","catch","err","authRegister","fname","lname","phone","password_confirmation","message","first_name","last_name","phone_number","authLogout","resetPassword","tokenConfig"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { AUTH_LOADING, AUTH_LOADED, AUTH_ERROR, AUTH_LOGIN_SUCCESS, AUTH_LOGIN_FAIL, AUTH_LOGOUT_SUCCESS, AUTH_REGISTER_SUCCESS, AUTH_REGISTER_FAIL } from \"./types\";\n\n\n// CHECK TOKEN AND LOAD AUTH STATE\nexport const authLoad = () => (dispatch, getState) => {\n    dispatch({type: AUTH_LOADING});\n\n    // test\n    if (getState().authReducer.token) {\n        dispatch({type: AUTH_LOADED});\n    } else {\n        dispatch({type: AUTH_ERROR});\n    }\n\n    // axios.post('check', null, tokenConfig(getState))\n    //     .then(res => {\n    //         dispatch({\n    //             type: AUTH_LOADED,\n    //             type: AUTH_ERROR,\n    //             payload: res.data,\n    //         });\n    //     }).catch(err => {\n    //         dispatch({type: AUTH_ERROR});\n    //         console.log(err)\n    //     })\n};\n\n// LOGIN\nexport const authLogin = (email, password) => dispatch => {\n    dispatch({type: AUTH_LOADING});\n    \n    const config = {\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({email, password});\n\n    axios.post('https://alfinder.com/alfinder/public/api/auth/login', body, config)\n        .then(res => {\n            console.log(res.data);\n            dispatch({\n                type: res.data.data.code === 7 ? AUTH_LOGIN_SUCCESS : AUTH_LOGIN_FAIL,\n                payload: res.data,\n            });\n        }).catch(err => {\n            dispatch({\n                type: AUTH_LOGIN_FAIL,\n                payload: err\n            });\n            console.log(err)\n        })\n};\n\n// REGISTER\nexport const authRegister = ({fname, lname, email, phone, password, password_confirmation}) => dispatch => {\n\n    if (password !== password_confirmation) {\n        dispatch({\n            type: AUTH_REGISTER_FAIL,\n            payload: {\n                message: 'passwords much match.'\n            }\n        });\n    }\n    \n    axios.post('https://alfinder.com/alfinder/public/api/user/register', {\n        first_name: fname,\n        last_name: lname,\n        email: email,\n        phone_number: phone,\n        password: password\n    })\n    .then(res => {\n        console.log(res);\n        dispatch({type: AUTH_REGISTER_SUCCESS});\n        dispatch(authLogin(email, password));\n    })\n    .catch(err => {\n        dispatch({type: AUTH_REGISTER_FAIL, payload: err});\n        console.log(err);\n    });\n};\n\n// LOGOUT\nexport const authLogout = () => (dispatch, getState) => {\n    const token = getState().authReducer.token;\n    const config = {\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        }\n    }\n\n    if (token) {\n        config.headers['Authentication'] = `Token ${token}`;\n    }\n\n    // axios.post('logout', null, tokenConfig(getState))\n    //     .then(res => {\n            dispatch({\n                type: AUTH_LOGOUT_SUCCESS,\n            });\n        // }).catch(err => {\n        //     dispatch({type: AUTH_ERROR, payload: err});\n        //     console.log(err)\n        // })\n};\n\n// RESET PASSWORD\nexport const resetPassword = () => (dispatch, getState) => {};\n\n// HELPER\nexport const tokenConfig = getState => {\n    const token = getState().authReducer.token;\n    const config = {\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        }\n    }\n    if (token) {\n        config.headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    return config;\n};\n"]},"metadata":{},"sourceType":"module"}